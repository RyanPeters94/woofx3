// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: event.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as common from "./common.pb";

//========================================//
//                 Types                  //
//========================================//

export interface UserEvent {
  userId: string;
  displayName: string;
  eventType: string;
  bitCheer?: BitCheerEvent | null | undefined;
  message?: MessageEvent | null | undefined;
  subscribe?: SubscibeEvent | null | undefined;
  follow?: FollowEvent | null | undefined;
}

export interface CreateUserEventRequest {
  event: UserEvent;
}

export interface CreateUserEventResponse {
  status: common.ResponseStatus;
  event: UserEvent;
}

export interface BitCheerEvent {
  amount: number;
}

export interface MessageEvent {
  message: string;
}

export interface SubscibeEvent {
  tier: string;
  gift: boolean;
}

export interface FollowEvent {
  followDate: string;
}

//========================================//
//      EventService Protobuf Client      //
//========================================//

export async function CreateUserEvent(
  createUserEventRequest: CreateUserEventRequest,
  config?: ClientConfiguration,
): Promise<CreateUserEventResponse> {
  const response = await PBrequest(
    "/wolfyttv.event.EventService/CreateUserEvent",
    CreateUserEventRequest.encode(createUserEventRequest),
    config,
  );
  return CreateUserEventResponse.decode(response);
}

//========================================//
//        EventService JSON Client        //
//========================================//

export async function CreateUserEventJSON(
  createUserEventRequest: CreateUserEventRequest,
  config?: ClientConfiguration,
): Promise<CreateUserEventResponse> {
  const response = await JSONrequest(
    "/wolfyttv.event.EventService/CreateUserEvent",
    CreateUserEventRequestJSON.encode(createUserEventRequest),
    config,
  );
  return CreateUserEventResponseJSON.decode(response);
}

//========================================//
//              EventService              //
//========================================//

export interface EventService<Context = unknown> {
  CreateUserEvent: (
    createUserEventRequest: CreateUserEventRequest,
    context: Context,
  ) => Promise<CreateUserEventResponse> | CreateUserEventResponse;
}

export function createEventService<Context>(service: EventService<Context>) {
  return {
    name: "wolfyttv.event.EventService",
    methods: {
      CreateUserEvent: {
        name: "CreateUserEvent",
        handler: service.CreateUserEvent,
        input: {
          protobuf: CreateUserEventRequest,
          json: CreateUserEventRequestJSON,
        },
        output: {
          protobuf: CreateUserEventResponse,
          json: CreateUserEventResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const UserEvent = {
  /**
   * Serializes UserEvent to protobuf.
   */
  encode: function (msg: PartialDeep<UserEvent>): Uint8Array {
    return UserEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserEvent from protobuf.
   */
  decode: function (bytes: ByteSource): UserEvent {
    return UserEvent._readMessage(
      UserEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEvent>): UserEvent {
    return {
      userId: "",
      displayName: "",
      eventType: "",
      bitCheer: undefined,
      message: undefined,
      subscribe: undefined,
      follow: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.displayName) {
      writer.writeString(2, msg.displayName);
    }
    if (msg.eventType) {
      writer.writeString(3, msg.eventType);
    }
    if (msg.bitCheer != undefined) {
      writer.writeMessage(4, msg.bitCheer, BitCheerEvent._writeMessage);
    }
    if (msg.message != undefined) {
      writer.writeMessage(5, msg.message, MessageEvent._writeMessage);
    }
    if (msg.subscribe != undefined) {
      writer.writeMessage(6, msg.subscribe, SubscibeEvent._writeMessage);
    }
    if (msg.follow != undefined) {
      writer.writeMessage(7, msg.follow, FollowEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEvent,
    reader: protoscript.BinaryReader,
  ): UserEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          msg.displayName = reader.readString();
          break;
        }
        case 3: {
          msg.eventType = reader.readString();
          break;
        }
        case 4: {
          msg.bitCheer = BitCheerEvent.initialize();
          reader.readMessage(msg.bitCheer, BitCheerEvent._readMessage);
          break;
        }
        case 5: {
          msg.message = MessageEvent.initialize();
          reader.readMessage(msg.message, MessageEvent._readMessage);
          break;
        }
        case 6: {
          msg.subscribe = SubscibeEvent.initialize();
          reader.readMessage(msg.subscribe, SubscibeEvent._readMessage);
          break;
        }
        case 7: {
          msg.follow = FollowEvent.initialize();
          reader.readMessage(msg.follow, FollowEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserEventRequest = {
  /**
   * Serializes CreateUserEventRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserEventRequest>): Uint8Array {
    return CreateUserEventRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserEventRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserEventRequest {
    return CreateUserEventRequest._readMessage(
      CreateUserEventRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserEventRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventRequest>,
  ): CreateUserEventRequest {
    return {
      event: UserEvent.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.event) {
      writer.writeMessage(1, msg.event, UserEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserEventRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.event, UserEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserEventResponse = {
  /**
   * Serializes CreateUserEventResponse to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserEventResponse>): Uint8Array {
    return CreateUserEventResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserEventResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserEventResponse {
    return CreateUserEventResponse._readMessage(
      CreateUserEventResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserEventResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventResponse>,
  ): CreateUserEventResponse {
    return {
      status: common.ResponseStatus.initialize(),
      event: UserEvent.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.status) {
      writer.writeMessage(1, msg.status, common.ResponseStatus._writeMessage);
    }
    if (msg.event) {
      writer.writeMessage(2, msg.event, UserEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventResponse,
    reader: protoscript.BinaryReader,
  ): CreateUserEventResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.status, common.ResponseStatus._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.event, UserEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BitCheerEvent = {
  /**
   * Serializes BitCheerEvent to protobuf.
   */
  encode: function (msg: PartialDeep<BitCheerEvent>): Uint8Array {
    return BitCheerEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes BitCheerEvent from protobuf.
   */
  decode: function (bytes: ByteSource): BitCheerEvent {
    return BitCheerEvent._readMessage(
      BitCheerEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes BitCheerEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BitCheerEvent>): BitCheerEvent {
    return {
      amount: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BitCheerEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.amount) {
      writer.writeInt32(1, msg.amount);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: BitCheerEvent,
    reader: protoscript.BinaryReader,
  ): BitCheerEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.amount = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageEvent = {
  /**
   * Serializes MessageEvent to protobuf.
   */
  encode: function (msg: PartialDeep<MessageEvent>): Uint8Array {
    return MessageEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageEvent from protobuf.
   */
  decode: function (bytes: ByteSource): MessageEvent {
    return MessageEvent._readMessage(
      MessageEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes MessageEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MessageEvent>): MessageEvent {
    return {
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MessageEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.message) {
      writer.writeString(1, msg.message);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageEvent,
    reader: protoscript.BinaryReader,
  ): MessageEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.message = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SubscibeEvent = {
  /**
   * Serializes SubscibeEvent to protobuf.
   */
  encode: function (msg: PartialDeep<SubscibeEvent>): Uint8Array {
    return SubscibeEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SubscibeEvent from protobuf.
   */
  decode: function (bytes: ByteSource): SubscibeEvent {
    return SubscibeEvent._readMessage(
      SubscibeEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SubscibeEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SubscibeEvent>): SubscibeEvent {
    return {
      tier: "",
      gift: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SubscibeEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.tier) {
      writer.writeString(1, msg.tier);
    }
    if (msg.gift) {
      writer.writeBool(2, msg.gift);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SubscibeEvent,
    reader: protoscript.BinaryReader,
  ): SubscibeEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.tier = reader.readString();
          break;
        }
        case 2: {
          msg.gift = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FollowEvent = {
  /**
   * Serializes FollowEvent to protobuf.
   */
  encode: function (msg: PartialDeep<FollowEvent>): Uint8Array {
    return FollowEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FollowEvent from protobuf.
   */
  decode: function (bytes: ByteSource): FollowEvent {
    return FollowEvent._readMessage(
      FollowEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FollowEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FollowEvent>): FollowEvent {
    return {
      followDate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FollowEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.followDate) {
      writer.writeString(1, msg.followDate);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FollowEvent,
    reader: protoscript.BinaryReader,
  ): FollowEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.followDate = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserEventJSON = {
  /**
   * Serializes UserEvent to JSON.
   */
  encode: function (msg: PartialDeep<UserEvent>): string {
    return JSON.stringify(UserEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserEvent from JSON.
   */
  decode: function (json: string): UserEvent {
    return UserEventJSON._readMessage(
      UserEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEvent>): UserEvent {
    return {
      userId: "",
      displayName: "",
      eventType: "",
      bitCheer: undefined,
      message: undefined,
      subscribe: undefined,
      follow: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.eventType) {
      json["eventType"] = msg.eventType;
    }
    if (msg.bitCheer != undefined) {
      const _bitCheer_ = BitCheerEventJSON._writeMessage(msg.bitCheer);
      json["bitCheer"] = _bitCheer_;
    }
    if (msg.message != undefined) {
      const _message_ = MessageEventJSON._writeMessage(msg.message);
      json["message"] = _message_;
    }
    if (msg.subscribe != undefined) {
      const _subscribe_ = SubscibeEventJSON._writeMessage(msg.subscribe);
      json["subscribe"] = _subscribe_;
    }
    if (msg.follow != undefined) {
      const _follow_ = FollowEventJSON._writeMessage(msg.follow);
      json["follow"] = _follow_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserEvent, json: any): UserEvent {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _displayName_ = json["displayName"] ?? json["display_name"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _eventType_ = json["eventType"] ?? json["event_type"];
    if (_eventType_) {
      msg.eventType = _eventType_;
    }
    const _bitCheer_ = json["bitCheer"] ?? json["bit_cheer"];
    if (_bitCheer_) {
      msg.bitCheer = BitCheerEventJSON.initialize();
      BitCheerEventJSON._readMessage(msg.bitCheer, _bitCheer_);
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = MessageEventJSON.initialize();
      MessageEventJSON._readMessage(msg.message, _message_);
    }
    const _subscribe_ = json["subscribe"];
    if (_subscribe_) {
      msg.subscribe = SubscibeEventJSON.initialize();
      SubscibeEventJSON._readMessage(msg.subscribe, _subscribe_);
    }
    const _follow_ = json["follow"];
    if (_follow_) {
      msg.follow = FollowEventJSON.initialize();
      FollowEventJSON._readMessage(msg.follow, _follow_);
    }
    return msg;
  },
};

export const CreateUserEventRequestJSON = {
  /**
   * Serializes CreateUserEventRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserEventRequest>): string {
    return JSON.stringify(CreateUserEventRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserEventRequest from JSON.
   */
  decode: function (json: string): CreateUserEventRequest {
    return CreateUserEventRequestJSON._readMessage(
      CreateUserEventRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserEventRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventRequest>,
  ): CreateUserEventRequest {
    return {
      event: UserEventJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.event) {
      const _event_ = UserEventJSON._writeMessage(msg.event);
      if (Object.keys(_event_).length > 0) {
        json["event"] = _event_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventRequest,
    json: any,
  ): CreateUserEventRequest {
    const _event_ = json["event"];
    if (_event_) {
      UserEventJSON._readMessage(msg.event, _event_);
    }
    return msg;
  },
};

export const CreateUserEventResponseJSON = {
  /**
   * Serializes CreateUserEventResponse to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserEventResponse>): string {
    return JSON.stringify(CreateUserEventResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserEventResponse from JSON.
   */
  decode: function (json: string): CreateUserEventResponse {
    return CreateUserEventResponseJSON._readMessage(
      CreateUserEventResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserEventResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventResponse>,
  ): CreateUserEventResponse {
    return {
      status: common.ResponseStatusJSON.initialize(),
      event: UserEventJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.status) {
      const _status_ = common.ResponseStatusJSON._writeMessage(msg.status);
      if (Object.keys(_status_).length > 0) {
        json["status"] = _status_;
      }
    }
    if (msg.event) {
      const _event_ = UserEventJSON._writeMessage(msg.event);
      if (Object.keys(_event_).length > 0) {
        json["event"] = _event_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventResponse,
    json: any,
  ): CreateUserEventResponse {
    const _status_ = json["status"];
    if (_status_) {
      common.ResponseStatusJSON._readMessage(msg.status, _status_);
    }
    const _event_ = json["event"];
    if (_event_) {
      UserEventJSON._readMessage(msg.event, _event_);
    }
    return msg;
  },
};

export const BitCheerEventJSON = {
  /**
   * Serializes BitCheerEvent to JSON.
   */
  encode: function (msg: PartialDeep<BitCheerEvent>): string {
    return JSON.stringify(BitCheerEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes BitCheerEvent from JSON.
   */
  decode: function (json: string): BitCheerEvent {
    return BitCheerEventJSON._readMessage(
      BitCheerEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes BitCheerEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<BitCheerEvent>): BitCheerEvent {
    return {
      amount: 0,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<BitCheerEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.amount) {
      json["amount"] = msg.amount;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BitCheerEvent, json: any): BitCheerEvent {
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = protoscript.parseNumber(_amount_);
    }
    return msg;
  },
};

export const MessageEventJSON = {
  /**
   * Serializes MessageEvent to JSON.
   */
  encode: function (msg: PartialDeep<MessageEvent>): string {
    return JSON.stringify(MessageEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageEvent from JSON.
   */
  decode: function (json: string): MessageEvent {
    return MessageEventJSON._readMessage(
      MessageEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes MessageEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MessageEvent>): MessageEvent {
    return {
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MessageEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      json["message"] = msg.message;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessageEvent, json: any): MessageEvent {
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    return msg;
  },
};

export const SubscibeEventJSON = {
  /**
   * Serializes SubscibeEvent to JSON.
   */
  encode: function (msg: PartialDeep<SubscibeEvent>): string {
    return JSON.stringify(SubscibeEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes SubscibeEvent from JSON.
   */
  decode: function (json: string): SubscibeEvent {
    return SubscibeEventJSON._readMessage(
      SubscibeEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SubscibeEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SubscibeEvent>): SubscibeEvent {
    return {
      tier: "",
      gift: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SubscibeEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.tier) {
      json["tier"] = msg.tier;
    }
    if (msg.gift) {
      json["gift"] = msg.gift;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SubscibeEvent, json: any): SubscibeEvent {
    const _tier_ = json["tier"];
    if (_tier_) {
      msg.tier = _tier_;
    }
    const _gift_ = json["gift"];
    if (_gift_) {
      msg.gift = _gift_;
    }
    return msg;
  },
};

export const FollowEventJSON = {
  /**
   * Serializes FollowEvent to JSON.
   */
  encode: function (msg: PartialDeep<FollowEvent>): string {
    return JSON.stringify(FollowEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes FollowEvent from JSON.
   */
  decode: function (json: string): FollowEvent {
    return FollowEventJSON._readMessage(
      FollowEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FollowEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FollowEvent>): FollowEvent {
    return {
      followDate: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FollowEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.followDate) {
      json["followDate"] = msg.followDate;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FollowEvent, json: any): FollowEvent {
    const _followDate_ = json["followDate"] ?? json["follow_date"];
    if (_followDate_) {
      msg.followDate = _followDate_;
    }
    return msg;
  },
};
