// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: user.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetUserTokenRequest {
  userId: string;
}

export interface GetUserTokenResponse {
  token: string;
}

export interface GetBroadcasterTokenRequest {
  broadcasterId: string;
}

export interface GetBroadcasterTokenResponse {
  token: string;
}

export interface TwitchUser {
  userId?: string | null | undefined;
  displayName?: string | null | undefined;
}

export interface UserEvent {
  eventType: string;
  eventValue: string;
}

export interface CreateUserChatMessageRequest {
  user: TwitchUser;
  message: string;
}

export interface CreateUserChatMessageResponse {
  user: TwitchUser;
  message: string;
  createdAt: string;
}

export interface CreateUserEventRequest {
  user: TwitchUser;
  event: UserEvent;
}

export interface CreateUserEventResponse {
  user: TwitchUser;
  event: UserEvent;
  createdAt: string;
}

//========================================//
//     CoreDBService Protobuf Client      //
//========================================//

export async function GetUserToken(
  getUserTokenRequest: GetUserTokenRequest,
  config?: ClientConfiguration,
): Promise<GetUserTokenResponse> {
  const response = await PBrequest(
    "/wolfyttv.coredb.CoreDBService/GetUserToken",
    GetUserTokenRequest.encode(getUserTokenRequest),
    config,
  );
  return GetUserTokenResponse.decode(response);
}

export async function GetBroadcasterToken(
  getBroadcasterTokenRequest: GetBroadcasterTokenRequest,
  config?: ClientConfiguration,
): Promise<GetBroadcasterTokenResponse> {
  const response = await PBrequest(
    "/wolfyttv.coredb.CoreDBService/GetBroadcasterToken",
    GetBroadcasterTokenRequest.encode(getBroadcasterTokenRequest),
    config,
  );
  return GetBroadcasterTokenResponse.decode(response);
}

export async function CreateUserChatMessage(
  createUserChatMessageRequest: CreateUserChatMessageRequest,
  config?: ClientConfiguration,
): Promise<CreateUserChatMessageResponse> {
  const response = await PBrequest(
    "/wolfyttv.coredb.CoreDBService/CreateUserChatMessage",
    CreateUserChatMessageRequest.encode(createUserChatMessageRequest),
    config,
  );
  return CreateUserChatMessageResponse.decode(response);
}

export async function CreateUserEvent(
  createUserEventRequest: CreateUserEventRequest,
  config?: ClientConfiguration,
): Promise<CreateUserEventResponse> {
  const response = await PBrequest(
    "/wolfyttv.coredb.CoreDBService/CreateUserEvent",
    CreateUserEventRequest.encode(createUserEventRequest),
    config,
  );
  return CreateUserEventResponse.decode(response);
}

//========================================//
//       CoreDBService JSON Client        //
//========================================//

export async function GetUserTokenJSON(
  getUserTokenRequest: GetUserTokenRequest,
  config?: ClientConfiguration,
): Promise<GetUserTokenResponse> {
  const response = await JSONrequest(
    "/wolfyttv.coredb.CoreDBService/GetUserToken",
    GetUserTokenRequestJSON.encode(getUserTokenRequest),
    config,
  );
  return GetUserTokenResponseJSON.decode(response);
}

export async function GetBroadcasterTokenJSON(
  getBroadcasterTokenRequest: GetBroadcasterTokenRequest,
  config?: ClientConfiguration,
): Promise<GetBroadcasterTokenResponse> {
  const response = await JSONrequest(
    "/wolfyttv.coredb.CoreDBService/GetBroadcasterToken",
    GetBroadcasterTokenRequestJSON.encode(getBroadcasterTokenRequest),
    config,
  );
  return GetBroadcasterTokenResponseJSON.decode(response);
}

export async function CreateUserChatMessageJSON(
  createUserChatMessageRequest: CreateUserChatMessageRequest,
  config?: ClientConfiguration,
): Promise<CreateUserChatMessageResponse> {
  const response = await JSONrequest(
    "/wolfyttv.coredb.CoreDBService/CreateUserChatMessage",
    CreateUserChatMessageRequestJSON.encode(createUserChatMessageRequest),
    config,
  );
  return CreateUserChatMessageResponseJSON.decode(response);
}

export async function CreateUserEventJSON(
  createUserEventRequest: CreateUserEventRequest,
  config?: ClientConfiguration,
): Promise<CreateUserEventResponse> {
  const response = await JSONrequest(
    "/wolfyttv.coredb.CoreDBService/CreateUserEvent",
    CreateUserEventRequestJSON.encode(createUserEventRequest),
    config,
  );
  return CreateUserEventResponseJSON.decode(response);
}

//========================================//
//             CoreDBService              //
//========================================//

export interface CoreDBService<Context = unknown> {
  GetUserToken: (
    getUserTokenRequest: GetUserTokenRequest,
    context: Context,
  ) => Promise<GetUserTokenResponse> | GetUserTokenResponse;
  GetBroadcasterToken: (
    getBroadcasterTokenRequest: GetBroadcasterTokenRequest,
    context: Context,
  ) => Promise<GetBroadcasterTokenResponse> | GetBroadcasterTokenResponse;
  CreateUserChatMessage: (
    createUserChatMessageRequest: CreateUserChatMessageRequest,
    context: Context,
  ) => Promise<CreateUserChatMessageResponse> | CreateUserChatMessageResponse;
  CreateUserEvent: (
    createUserEventRequest: CreateUserEventRequest,
    context: Context,
  ) => Promise<CreateUserEventResponse> | CreateUserEventResponse;
}

export function createCoreDBService<Context>(service: CoreDBService<Context>) {
  return {
    name: "wolfyttv.coredb.CoreDBService",
    methods: {
      GetUserToken: {
        name: "GetUserToken",
        handler: service.GetUserToken,
        input: { protobuf: GetUserTokenRequest, json: GetUserTokenRequestJSON },
        output: {
          protobuf: GetUserTokenResponse,
          json: GetUserTokenResponseJSON,
        },
      },
      GetBroadcasterToken: {
        name: "GetBroadcasterToken",
        handler: service.GetBroadcasterToken,
        input: {
          protobuf: GetBroadcasterTokenRequest,
          json: GetBroadcasterTokenRequestJSON,
        },
        output: {
          protobuf: GetBroadcasterTokenResponse,
          json: GetBroadcasterTokenResponseJSON,
        },
      },
      CreateUserChatMessage: {
        name: "CreateUserChatMessage",
        handler: service.CreateUserChatMessage,
        input: {
          protobuf: CreateUserChatMessageRequest,
          json: CreateUserChatMessageRequestJSON,
        },
        output: {
          protobuf: CreateUserChatMessageResponse,
          json: CreateUserChatMessageResponseJSON,
        },
      },
      CreateUserEvent: {
        name: "CreateUserEvent",
        handler: service.CreateUserEvent,
        input: {
          protobuf: CreateUserEventRequest,
          json: CreateUserEventRequestJSON,
        },
        output: {
          protobuf: CreateUserEventResponse,
          json: CreateUserEventResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetUserTokenRequest = {
  /**
   * Serializes GetUserTokenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): Uint8Array {
    return GetUserTokenRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenRequest {
    return GetUserTokenRequest._readMessage(
      GetUserTokenRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    reader: protoscript.BinaryReader,
  ): GetUserTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserTokenResponse = {
  /**
   * Serializes GetUserTokenResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): Uint8Array {
    return GetUserTokenResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenResponse {
    return GetUserTokenResponse._readMessage(
      GetUserTokenResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.token) {
      writer.writeString(1, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    reader: protoscript.BinaryReader,
  ): GetUserTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetBroadcasterTokenRequest = {
  /**
   * Serializes GetBroadcasterTokenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenRequest>): Uint8Array {
    return GetBroadcasterTokenRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetBroadcasterTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetBroadcasterTokenRequest {
    return GetBroadcasterTokenRequest._readMessage(
      GetBroadcasterTokenRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetBroadcasterTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenRequest>,
  ): GetBroadcasterTokenRequest {
    return {
      broadcasterId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.broadcasterId) {
      writer.writeString(1, msg.broadcasterId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenRequest,
    reader: protoscript.BinaryReader,
  ): GetBroadcasterTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.broadcasterId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetBroadcasterTokenResponse = {
  /**
   * Serializes GetBroadcasterTokenResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenResponse>): Uint8Array {
    return GetBroadcasterTokenResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetBroadcasterTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetBroadcasterTokenResponse {
    return GetBroadcasterTokenResponse._readMessage(
      GetBroadcasterTokenResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetBroadcasterTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenResponse>,
  ): GetBroadcasterTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.token) {
      writer.writeString(1, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenResponse,
    reader: protoscript.BinaryReader,
  ): GetBroadcasterTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const TwitchUser = {
  /**
   * Serializes TwitchUser to protobuf.
   */
  encode: function (msg: PartialDeep<TwitchUser>): Uint8Array {
    return TwitchUser._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TwitchUser from protobuf.
   */
  decode: function (bytes: ByteSource): TwitchUser {
    return TwitchUser._readMessage(
      TwitchUser.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes TwitchUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TwitchUser>): TwitchUser {
    return {
      userId: undefined,
      displayName: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TwitchUser>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId != undefined) {
      writer.writeString(2, msg.userId);
    }
    if (msg.displayName != undefined) {
      writer.writeString(3, msg.displayName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TwitchUser,
    reader: protoscript.BinaryReader,
  ): TwitchUser {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 2: {
          msg.userId = reader.readString();
          break;
        }
        case 3: {
          msg.displayName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserEvent = {
  /**
   * Serializes UserEvent to protobuf.
   */
  encode: function (msg: PartialDeep<UserEvent>): Uint8Array {
    return UserEvent._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UserEvent from protobuf.
   */
  decode: function (bytes: ByteSource): UserEvent {
    return UserEvent._readMessage(
      UserEvent.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UserEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEvent>): UserEvent {
    return {
      eventType: "",
      eventValue: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEvent>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.eventType) {
      writer.writeString(2, msg.eventType);
    }
    if (msg.eventValue) {
      writer.writeString(3, msg.eventValue);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserEvent,
    reader: protoscript.BinaryReader,
  ): UserEvent {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 2: {
          msg.eventType = reader.readString();
          break;
        }
        case 3: {
          msg.eventValue = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserChatMessageRequest = {
  /**
   * Serializes CreateUserChatMessageRequest to protobuf.
   */
  encode: function (
    msg: PartialDeep<CreateUserChatMessageRequest>,
  ): Uint8Array {
    return CreateUserChatMessageRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserChatMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserChatMessageRequest {
    return CreateUserChatMessageRequest._readMessage(
      CreateUserChatMessageRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserChatMessageRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserChatMessageRequest>,
  ): CreateUserChatMessageRequest {
    return {
      user: TwitchUser.initialize(),
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserChatMessageRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, TwitchUser._writeMessage);
    }
    if (msg.message) {
      writer.writeString(2, msg.message);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserChatMessageRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserChatMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, TwitchUser._readMessage);
          break;
        }
        case 2: {
          msg.message = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserChatMessageResponse = {
  /**
   * Serializes CreateUserChatMessageResponse to protobuf.
   */
  encode: function (
    msg: PartialDeep<CreateUserChatMessageResponse>,
  ): Uint8Array {
    return CreateUserChatMessageResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserChatMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserChatMessageResponse {
    return CreateUserChatMessageResponse._readMessage(
      CreateUserChatMessageResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserChatMessageResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserChatMessageResponse>,
  ): CreateUserChatMessageResponse {
    return {
      user: TwitchUser.initialize(),
      message: "",
      createdAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserChatMessageResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, TwitchUser._writeMessage);
    }
    if (msg.message) {
      writer.writeString(2, msg.message);
    }
    if (msg.createdAt) {
      writer.writeString(4, msg.createdAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserChatMessageResponse,
    reader: protoscript.BinaryReader,
  ): CreateUserChatMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, TwitchUser._readMessage);
          break;
        }
        case 2: {
          msg.message = reader.readString();
          break;
        }
        case 4: {
          msg.createdAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserEventRequest = {
  /**
   * Serializes CreateUserEventRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserEventRequest>): Uint8Array {
    return CreateUserEventRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserEventRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserEventRequest {
    return CreateUserEventRequest._readMessage(
      CreateUserEventRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserEventRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventRequest>,
  ): CreateUserEventRequest {
    return {
      user: TwitchUser.initialize(),
      event: UserEvent.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, TwitchUser._writeMessage);
    }
    if (msg.event) {
      writer.writeMessage(2, msg.event, UserEvent._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserEventRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, TwitchUser._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.event, UserEvent._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserEventResponse = {
  /**
   * Serializes CreateUserEventResponse to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserEventResponse>): Uint8Array {
    return CreateUserEventResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserEventResponse from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserEventResponse {
    return CreateUserEventResponse._readMessage(
      CreateUserEventResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserEventResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventResponse>,
  ): CreateUserEventResponse {
    return {
      user: TwitchUser.initialize(),
      event: UserEvent.initialize(),
      createdAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, TwitchUser._writeMessage);
    }
    if (msg.event) {
      writer.writeMessage(2, msg.event, UserEvent._writeMessage);
    }
    if (msg.createdAt) {
      writer.writeString(5, msg.createdAt);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventResponse,
    reader: protoscript.BinaryReader,
  ): CreateUserEventResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, TwitchUser._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.event, UserEvent._readMessage);
          break;
        }
        case 5: {
          msg.createdAt = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetUserTokenRequestJSON = {
  /**
   * Serializes GetUserTokenRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): string {
    return JSON.stringify(GetUserTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenRequest from JSON.
   */
  decode: function (json: string): GetUserTokenRequest {
    return GetUserTokenRequestJSON._readMessage(
      GetUserTokenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      userId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    json: any,
  ): GetUserTokenRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    return msg;
  },
};

export const GetUserTokenResponseJSON = {
  /**
   * Serializes GetUserTokenResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): string {
    return JSON.stringify(GetUserTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenResponse from JSON.
   */
  decode: function (json: string): GetUserTokenResponse {
    return GetUserTokenResponseJSON._readMessage(
      GetUserTokenResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.token) {
      json["token"] = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    json: any,
  ): GetUserTokenResponse {
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    return msg;
  },
};

export const GetBroadcasterTokenRequestJSON = {
  /**
   * Serializes GetBroadcasterTokenRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenRequest>): string {
    return JSON.stringify(GetBroadcasterTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetBroadcasterTokenRequest from JSON.
   */
  decode: function (json: string): GetBroadcasterTokenRequest {
    return GetBroadcasterTokenRequestJSON._readMessage(
      GetBroadcasterTokenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetBroadcasterTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenRequest>,
  ): GetBroadcasterTokenRequest {
    return {
      broadcasterId: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.broadcasterId) {
      json["broadcasterId"] = msg.broadcasterId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenRequest,
    json: any,
  ): GetBroadcasterTokenRequest {
    const _broadcasterId_ = json["broadcasterId"] ?? json["broadcaster_id"];
    if (_broadcasterId_) {
      msg.broadcasterId = _broadcasterId_;
    }
    return msg;
  },
};

export const GetBroadcasterTokenResponseJSON = {
  /**
   * Serializes GetBroadcasterTokenResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetBroadcasterTokenResponse>): string {
    return JSON.stringify(GetBroadcasterTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetBroadcasterTokenResponse from JSON.
   */
  decode: function (json: string): GetBroadcasterTokenResponse {
    return GetBroadcasterTokenResponseJSON._readMessage(
      GetBroadcasterTokenResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetBroadcasterTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetBroadcasterTokenResponse>,
  ): GetBroadcasterTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetBroadcasterTokenResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.token) {
      json["token"] = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetBroadcasterTokenResponse,
    json: any,
  ): GetBroadcasterTokenResponse {
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    return msg;
  },
};

export const TwitchUserJSON = {
  /**
   * Serializes TwitchUser to JSON.
   */
  encode: function (msg: PartialDeep<TwitchUser>): string {
    return JSON.stringify(TwitchUserJSON._writeMessage(msg));
  },

  /**
   * Deserializes TwitchUser from JSON.
   */
  decode: function (json: string): TwitchUser {
    return TwitchUserJSON._readMessage(
      TwitchUserJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TwitchUser with all fields set to their default value.
   */
  initialize: function (msg?: Partial<TwitchUser>): TwitchUser {
    return {
      userId: undefined,
      displayName: undefined,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TwitchUser>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId != undefined) {
      json["userId"] = msg.userId;
    }
    if (msg.displayName != undefined) {
      json["displayName"] = msg.displayName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: TwitchUser, json: any): TwitchUser {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _displayName_ = json["displayName"] ?? json["display_name"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    return msg;
  },
};

export const UserEventJSON = {
  /**
   * Serializes UserEvent to JSON.
   */
  encode: function (msg: PartialDeep<UserEvent>): string {
    return JSON.stringify(UserEventJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserEvent from JSON.
   */
  decode: function (json: string): UserEvent {
    return UserEventJSON._readMessage(
      UserEventJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UserEvent with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UserEvent>): UserEvent {
    return {
      eventType: "",
      eventValue: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UserEvent>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eventType) {
      json["eventType"] = msg.eventType;
    }
    if (msg.eventValue) {
      json["eventValue"] = msg.eventValue;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserEvent, json: any): UserEvent {
    const _eventType_ = json["eventType"] ?? json["event_type"];
    if (_eventType_) {
      msg.eventType = _eventType_;
    }
    const _eventValue_ = json["eventValue"] ?? json["event_value"];
    if (_eventValue_) {
      msg.eventValue = _eventValue_;
    }
    return msg;
  },
};

export const CreateUserChatMessageRequestJSON = {
  /**
   * Serializes CreateUserChatMessageRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserChatMessageRequest>): string {
    return JSON.stringify(CreateUserChatMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserChatMessageRequest from JSON.
   */
  decode: function (json: string): CreateUserChatMessageRequest {
    return CreateUserChatMessageRequestJSON._readMessage(
      CreateUserChatMessageRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserChatMessageRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserChatMessageRequest>,
  ): CreateUserChatMessageRequest {
    return {
      user: TwitchUserJSON.initialize(),
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserChatMessageRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = TwitchUserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserChatMessageRequest,
    json: any,
  ): CreateUserChatMessageRequest {
    const _user_ = json["user"];
    if (_user_) {
      TwitchUserJSON._readMessage(msg.user, _user_);
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    return msg;
  },
};

export const CreateUserChatMessageResponseJSON = {
  /**
   * Serializes CreateUserChatMessageResponse to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserChatMessageResponse>): string {
    return JSON.stringify(CreateUserChatMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserChatMessageResponse from JSON.
   */
  decode: function (json: string): CreateUserChatMessageResponse {
    return CreateUserChatMessageResponseJSON._readMessage(
      CreateUserChatMessageResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserChatMessageResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserChatMessageResponse>,
  ): CreateUserChatMessageResponse {
    return {
      user: TwitchUserJSON.initialize(),
      message: "",
      createdAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserChatMessageResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = TwitchUserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserChatMessageResponse,
    json: any,
  ): CreateUserChatMessageResponse {
    const _user_ = json["user"];
    if (_user_) {
      TwitchUserJSON._readMessage(msg.user, _user_);
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    return msg;
  },
};

export const CreateUserEventRequestJSON = {
  /**
   * Serializes CreateUserEventRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserEventRequest>): string {
    return JSON.stringify(CreateUserEventRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserEventRequest from JSON.
   */
  decode: function (json: string): CreateUserEventRequest {
    return CreateUserEventRequestJSON._readMessage(
      CreateUserEventRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserEventRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventRequest>,
  ): CreateUserEventRequest {
    return {
      user: TwitchUserJSON.initialize(),
      event: UserEventJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = TwitchUserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.event) {
      const _event_ = UserEventJSON._writeMessage(msg.event);
      if (Object.keys(_event_).length > 0) {
        json["event"] = _event_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventRequest,
    json: any,
  ): CreateUserEventRequest {
    const _user_ = json["user"];
    if (_user_) {
      TwitchUserJSON._readMessage(msg.user, _user_);
    }
    const _event_ = json["event"];
    if (_event_) {
      UserEventJSON._readMessage(msg.event, _event_);
    }
    return msg;
  },
};

export const CreateUserEventResponseJSON = {
  /**
   * Serializes CreateUserEventResponse to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserEventResponse>): string {
    return JSON.stringify(CreateUserEventResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserEventResponse from JSON.
   */
  decode: function (json: string): CreateUserEventResponse {
    return CreateUserEventResponseJSON._readMessage(
      CreateUserEventResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserEventResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateUserEventResponse>,
  ): CreateUserEventResponse {
    return {
      user: TwitchUserJSON.initialize(),
      event: UserEventJSON.initialize(),
      createdAt: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserEventResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = TwitchUserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.event) {
      const _event_ = UserEventJSON._writeMessage(msg.event);
      if (Object.keys(_event_).length > 0) {
        json["event"] = _event_;
      }
    }
    if (msg.createdAt) {
      json["createdAt"] = msg.createdAt;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserEventResponse,
    json: any,
  ): CreateUserEventResponse {
    const _user_ = json["user"];
    if (_user_) {
      TwitchUserJSON._readMessage(msg.user, _user_);
    }
    const _event_ = json["event"];
    if (_event_) {
      UserEventJSON._readMessage(msg.event, _event_);
    }
    const _createdAt_ = json["createdAt"] ?? json["created_at"];
    if (_createdAt_) {
      msg.createdAt = _createdAt_;
    }
    return msg;
  },
};
