// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: proto/coredb/coredb.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GetUserTokenRequest {
  username: string;
}

export interface GetUserTokenResponse {
  token: string;
}

//========================================//
//     CoreDBService Protobuf Client      //
//========================================//

export async function GetUserToken(
  getUserTokenRequest: GetUserTokenRequest,
  config?: ClientConfiguration,
): Promise<GetUserTokenResponse> {
  const response = await PBrequest(
    "/wolfyttv.coredb.CoreDBService/GetUserToken",
    GetUserTokenRequest.encode(getUserTokenRequest),
    config,
  );
  return GetUserTokenResponse.decode(response);
}

//========================================//
//       CoreDBService JSON Client        //
//========================================//

export async function GetUserTokenJSON(
  getUserTokenRequest: GetUserTokenRequest,
  config?: ClientConfiguration,
): Promise<GetUserTokenResponse> {
  const response = await JSONrequest(
    "/wolfyttv.coredb.CoreDBService/GetUserToken",
    GetUserTokenRequestJSON.encode(getUserTokenRequest),
    config,
  );
  return GetUserTokenResponseJSON.decode(response);
}

//========================================//
//             CoreDBService              //
//========================================//

export interface CoreDBService<Context = unknown> {
  GetUserToken: (
    getUserTokenRequest: GetUserTokenRequest,
    context: Context,
  ) => Promise<GetUserTokenResponse> | GetUserTokenResponse;
}

export function createCoreDBService<Context>(service: CoreDBService<Context>) {
  return {
    name: "wolfyttv.coredb.CoreDBService",
    methods: {
      GetUserToken: {
        name: "GetUserToken",
        handler: service.GetUserToken,
        input: { protobuf: GetUserTokenRequest, json: GetUserTokenRequestJSON },
        output: {
          protobuf: GetUserTokenResponse,
          json: GetUserTokenResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetUserTokenRequest = {
  /**
   * Serializes GetUserTokenRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): Uint8Array {
    return GetUserTokenRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenRequest {
    return GetUserTokenRequest._readMessage(
      GetUserTokenRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      username: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    reader: protoscript.BinaryReader,
  ): GetUserTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserTokenResponse = {
  /**
   * Serializes GetUserTokenResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): Uint8Array {
    return GetUserTokenResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserTokenResponse {
    return GetUserTokenResponse._readMessage(
      GetUserTokenResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.token) {
      writer.writeString(1, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    reader: protoscript.BinaryReader,
  ): GetUserTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GetUserTokenRequestJSON = {
  /**
   * Serializes GetUserTokenRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenRequest>): string {
    return JSON.stringify(GetUserTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenRequest from JSON.
   */
  decode: function (json: string): GetUserTokenRequest {
    return GetUserTokenRequestJSON._readMessage(
      GetUserTokenRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenRequest>,
  ): GetUserTokenRequest {
    return {
      username: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenRequest,
    json: any,
  ): GetUserTokenRequest {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    return msg;
  },
};

export const GetUserTokenResponseJSON = {
  /**
   * Serializes GetUserTokenResponse to JSON.
   */
  encode: function (msg: PartialDeep<GetUserTokenResponse>): string {
    return JSON.stringify(GetUserTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserTokenResponse from JSON.
   */
  decode: function (json: string): GetUserTokenResponse {
    return GetUserTokenResponseJSON._readMessage(
      GetUserTokenResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserTokenResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetUserTokenResponse>,
  ): GetUserTokenResponse {
    return {
      token: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserTokenResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.token) {
      json["token"] = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserTokenResponse,
    json: any,
  ): GetUserTokenResponse {
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    return msg;
  },
};
